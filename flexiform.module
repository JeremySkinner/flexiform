<?php
/**
 * @file
 * Module for the Flexiform system.
 */

/**
 * Implements hook_hook_info().
 */
function flexiform_hook_info() {
  $hooks['flexiform_group_info'] = array('group' => 'flexiform');
  $hooks['flexiform_submission_access'] = array('group' => 'flexiform');
  $hooks['default_flexiform'] = array('group' => 'flexiform_default');
  $hooks['default_flexiform_alter'] = array('group' => 'flexiform_default');
  return $hooks;
}

/**
 * Implements hook_menu()
 *
 * We want to add a manage form fields tab and a manage form entities tab
 * for each flexiform
 */
function flexiform_menu() {
  $items = array();

  // Get Flexiform Pages
  $query = db_select('flexiform', 'f');
  $query->isNotNull('path');
  $query->condition('path', '', '<>');
  $query->fields('f', array('form', 'path'));
  $forms = $query->execute()->fetchAllAssoc('form');

  foreach ($forms as $form => $row) {
    $items[$row->path] = array(
      'title callback' => 'flexiform_page_title',
      'title arguments' => array($form),
      'page callback' => 'flexiform_page_wrapper',
      'page arguments' => array($form),
      'access callback' => TRUE,
      'file' => 'flexiform.pages.inc',
    );
  }

  // Get Flexiform Edit Pages
  $query = db_select('flexiform', 'f');
  $query->isNotNull('edit_path');
  $query->condition('edit_path', '', '<>');
  $query->fields('f', array('form', 'edit_path'));
  $forms = $query->execute()->fetchAllAssoc('form');

  foreach ($forms as $form => $row) {
    $path_bits = explode('/', $row->edit_path);
    $wildcard_key = array_search('%', $path_bits);
    if ($wildcard_key === FALSE) {
      continue;
    }

    $items[$row->edit_path] = array(
      'title callback' => 'flexiform_page_title',
      'title arguments' => array($form, $wildcard_key),
      'page callback' => 'flexiform_page_wrapper',
      'page arguments' => array($form, $wildcard_key),
      'access callback' => TRUE,
      'file' => 'flexiform.pages.inc',
    );
  }

  return $items;
}

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function flexiform_entity_info() {
  // The entity that holds information about the entity types
  $return['flexiform'] = array(
    'label' => t('Flexible Form'),
    'entity class' => 'Flexiform',
    'controller class' => 'FlexiformController',
    'base table' => 'flexiform',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'form',
      'label' => 'label',
    ),
    'access callback' => 'flexiform_access',
    'module' => 'flexiform',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/flexiforms',
      'file' => 'flexiform.admin.inc',
      'controller class' => 'FlexiformUIController',
    ),
  );

  return $return;
}

/**
 * Impements hook_ctools_plugin_directory().
 */
function flexiform_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panelizer' && $plugin_type == 'entity') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_permission().
 */
function flexiform_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer flexiforms' => array(
      'title' => t('Administer flexiforms'),
      'description' => t('Create and delete fields for flexiforms, and set their permissions.'),
    ),
  );

  return $permissions;
}

/**
 * Access callback for the entity API.
 */
function flexiform_access($op, $type = NULL, $account = NULL) {
  return user_access('administer flexiforms', $account);
}

/**
 * Gets an array of all flexiforms, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return Flexiform[]
 *   Depending whether $type isset, an array of flexiforms or a single one.
 */
function flexiform_get_flexiforms($flexiform_name = NULL) {
  // entity_load will get the Entity controller for our flexiform_submission entity and call the load
  // function of that object - we are loading entities by name here.
  $flexiforms = entity_load_multiple_by_name('flexiform', isset($flexiform_name) ? array($flexiform_name) : FALSE);
  return isset($flexiform_name) ? reset($flexiforms) : $flexiforms;
}

/**
 * Gets an array of all flexiforms with a given base_entity type and bundle.
 *
 * @param string $entity_type
 *   The entity type of base entity.
 * @param string $bundle
 *   The bundle of the base entity.
 *
 * @return array
 *   An array of flexiforms.
 */
function flexiform_get_base_entity_forms($entity_type, $bundle = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'flexiform');
  $query->propertyCondition('base_entity', $entity_type);

  if ($bundle) {
    $query->propertyCondition('base_entity_bundle', $bundle);
  }

  $entities = $query->execute();

  if (empty($entities['flexiform'])) {
    return array();
  }

  return entity_load('flexiform', array_keys($entities['flexiform']));
}

/**
 * Menu argument loader; Load a flexiform by string.
 *
 * @param $form
 *   The machine-readable name of a flexiform to load.
 *
 * @return
 *   A flexiform array or FALSE if $type does not exist.
 */
function flexiform_load($form) {
  return flexiform_get_flexiforms($form);
}

/**
 * Saves a flexiform to the db.
 */
function flexiform_save(Flexiform $form) {
  $form->save();
}

/**
 * Deletes a flexiform from the db.
 */
function flexiform_delete(Flexiform $form) {
  $form->delete();
}

/**
 * Split a namespace into entity and field name
 */
function flexiform_formfield_load($string) {
  return $string;
}

/**
 * Implement hook_theme().
 */
function flexiform_theme() {
  return array(
    'flexiform_field_table' => array(
      'render element' => 'elements',
    ),
    'flexiform_entity_table' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function flexiform_forms($form_id, $args) {
  $forms = array();

  $parts = explode('__', $form_id);
  if ($parts[0] == 'flexiform') {
    $forms[$form_id] = array(
      'callback' => 'flexiform',
    );
  }

  return $forms;
}

/**
 * Implements hook_element_info().
 */
function flexiform_element_info() {
  return array(
    'flexiform_field_table' => array(
      '#theme' => 'flexiform_field_table',
      '#pre_render' => array('flexiform_field_table_pre_render'),
      '#regions' => array('' => array()),
    ),
    'flexiform_entity_table' => array(
      '#theme' => 'flexiform_entity_table',
      '#pre_render' => array('flexiform_entity_table_pre_render'),
      '#regions' => array('' => array()),
    ),
  );
}

/**
 * Retreive a list of flexiform groups.
 */
function flexiform_get_groups() {
  $groups = &drupal_static(__FUNCTION__, NULL);

  if ($groups === NULL) {
    $groups = module_invoke_all('flexiform_group_info');
  }

  return $groups;
}

//-----------------------------------------------------------------------------
// Flexiform Builder API

/**
 * Get info about all available builders.
 */
function flexiform_builder_info($builder = NULL) {
  $builders = &drupal_static(__FUNCTION__, array());

  if (empty($builders)) {
    if ($cache = cache_get('flexiform:builder_info', 'cache')) {
      $builders = $cache->data;
    }
    else {
      $builders = array();
      foreach (module_implements('flexiform_builder_info') as $module) {
        // Due to http://drupal.org/node/890660 we can't use module_invoke_all()
        // because we need to know the provenance of each set.
        $builders_module = module_invoke($module, 'flexiform_builder_info');
        foreach ($builders_module as $builder_name => $builder_info) {
          $builder_info += array(
            'class' => $builder_name,
            'label' => $builder_name,
            'module' => $module,
            'entity_types' => array(),
          );
          $builders[$builder_name] = $builder_info;
        }
      }

      // Alter the data sets with hook_party_data_set_info_alter().
      drupal_alter('flexiform_builder_info', $builders);

      cache_set('flexiform:builder_info', $builders);
    }
  }

  if (!empty($builder)) {
    return $builders[$builder];
  }

  return $builders;
}

/**
 * Get the builders available for a particular base entity type.
 */
function flexiform_entity_type_get_builders($entity_type) {
  // If this isn't an entity type return false
  if (!entity_get_info($entity_type)) {
    return FALSE;
  }

  $builders = flexiform_builder_info();
  $applicable_builders = array();
  foreach ($builders as $builder => $info) {
    if (empty($info['entity_types'])
      || in_array($entity_type, $info['entity_types'])) {
      $applicable_builders[$builder] = $info;
    }
  }
  return $applicable_builders;
}

/**
 * Implements hook_flexiform_builder_info().
 */
function flexiform_flexiform_builder_info() {
  $builders = array();

  $builders['FlexiformBuilderFlexiform'] = array(
    'class' => 'FlexiformBuilderFlexiform',
    'label' => t('Flexiform Form Builder'),
    'description' => t('The flexiform custom form builder. Use the configuration pages to add fields and entities to the form.'),
  );

  $fieldable_entities = array();
  foreach (entity_get_info() as $entity_type => $info) {
    if ($info['fieldable']) {
      $fieldable_entities[] = $entity_type;
    }
  }
  $builders['FlexiformBuilderEntityForm'] = array(
    'class' => 'FlexiformBuilderEntityForm',
    'label' => t('Entity Field Form'),
    'description' => t('Render the standard entity field form.'),
    'entity_types' => $fieldable_entities,
  );

  return $builders;
}

//-----------------------------------------------------------------------------
// Entity Getter and Setter API

/**
 * Get info about all entity getters
 */
function flexiform_entity_getter_info($getter = NULL) {
  $getters = &drupal_static(__FUNCTION__);

  if (!isset($getters)) {
    if ($cache = cache_get('flexiform:entity_getter_info', 'cache')) {
      $getters = $cache->data;
    }
    else {
      $getters = array();
      foreach (module_implements('flexiform_entity_getter_info') as $module) {
        // Due to http://drupal.org/node/890660 we can't use module_invoke_all()
        // because we need to know the provenance of each set.
        $getters_module = module_invoke($module, 'flexiform_entity_getter_info');
        foreach ($getters_module as $getter_name => $getter_info) {
          $getter_info += array(
            'params' => array(),
            'getter callback' => 'flexiform_entity_getter_' . $getter_name,
            'setter callback' => 'flexiform_entity_setter_' . $getter_name,
            'file' => $module . '.flexiform.inc',
            'module' => $module,
          );
          $getters[$getter_name] = $getter_info;
        }
      }

      // Alter the data sets with hook_party_data_set_info_alter().
      drupal_alter('flexiform_entity_getter_info', $getters);

      cache_set('flexiform:entity_getter_info', $getters);
    }
  }

  if (!empty($getter)) {
    return $getters[$getter];
  }

  return $getters;
}

/**
 * Get the getters for a particular entity type
 */
function flexiform_entity_type_get_getters($entity_type) {
  // If this isn't an entity type return false
  if (!entity_get_info($entity_type)) {
    return FALSE;
  }

  $getters = flexiform_entity_getter_info();
  $applicable_getters = array();
  foreach ($getters as $getter => $info) {
    if (in_array($entity_type, $info['entity_types'])) {
      $applicable_getters[$getter] = $info;
    }
  }
  return $applicable_getters;
}

/**
 * Implements hook_flexiform_entity_getter_info().
 */
function flexiform_flexiform_entity_getter_info() {
  $getters = array();

  // Base entity getter.
  $getters['base_entity'] = array(
    'label' => 'Base Entity',
    'description' => 'The Base Entity for this Flexiform',
    'entity_types' => array_keys(entity_get_info()),
    'file' => 'includes/flexiform.flexiform.inc',
  );

  // User Getters
  $getters['user_current_user'] = array(
    'label' => 'Current User',
    'description' => 'Load the current user into the Form',
    'entity_types' => array('user'),
    'file' => 'user.flexiform.inc',
  );

  // Profile2 Getters
  if (module_exists('profile2')) {
    $getters['profile2_profile_from_user'] = array(
      'label' => 'Profile2 from User',
      'description' => 'Load a Profile 2 Basede on a User',
      'params' => array(
        'user' => array(
          'entity_type' => 'user',
        ),
      ),
      'entity_types' => array('profile2'),
      'file' => 'profile2.flexiform.inc',
    );
  }

  // Party Getters.
  if (module_exists('party')) {
    // Getters for data sets.
    foreach (party_get_data_set_info() as $data_set_name => $info) {
      $getters[$data_set_name . '_from_party'] = array(
        'label' => t('@label data set', array('@label' => $info['label'])),
        'description' => t('Load a data set from a party.'),
        'data_set_name' => $data_set_name,
        'getter callback' => 'flexiform_entity_getter_party_data_set',
        'setter callback' => 'flexiform_entity_setter_party_data_set',
        'params' => array(
          'party' => array(
            'entity_type' => 'party',
          ),
        ),
        'entity_types' => array($info['entity type']),
        'file' => 'party.flexiform.inc',
      );
    }

    // Party from user Getters
    $getters['party_from_user'] = array(
      'label' => 'Party from User',
      'description' => 'Load a Party Based on a User',
      'params' => array(
        'user' => array(
          'entity_type' => 'user',
        ),
      ),
      'entity_types' => array('party'),
      'file' => 'party.flexiform.inc',
    );
  }

  return $getters;
}

//-----------------------------------------------------------------------------
// Flexiform Element API

/**
 * Get information about flexiform elements.
 */
function flexiform_get_element_info($entity_type = '', $bundle = '', $name = '') {
  $elements = &drupal_static(__FUNCTION__);

  if (!isset($elements)) {
    if ($cache = cache_get('flexiform:element_info', 'cache')) {
      $elements = $cache->data;
    }
    else {
      $elements = array();
      $elements = module_invoke_all('flexiform_element_info');

      // Make sure the entity_type, bundle and name are set.
      foreach ($elements as $entity_type_ => $elems) {
        foreach ($elems as $bundle_ => $els) {
          foreach ($els as $name_ => $element) {
            $elements[$entity_type_][$bundle_][$name_] += array(
              'entity_type' => $entity_type_,
              'bundle' => $bundle_,
              'name' => $name_,
              'group' => 'Other',
            );
          }
        }
      }

      // Alter the data sets with hook_party_data_set_info_alter().
      drupal_alter('flexiform_element_info', $elements);

      cache_set('flexiform:element_info', $elements);
    }
  }

  if (!empty($entity_type)) {
    if (!empty($bundle)) {
      if (!empty($name)) {
        return $elements[$entity_type][$bundle][$name];
      }
      return $elements[$entity_type][$bundle];
    }
    return $elements[$entity_type];
  }

  return $elements;
}

/**
 * Implements hook_flexiform_element_info().
 */
function flexiform_flexiform_element_info() {
  $elements = array();

  // Get the element for all nested flexiforms.
  $forms = db_select('flexiform', 'f')
    ->fields('f', array('label', 'form', 'base_entity', 'base_entity_bundle'))
    ->execute()
    ->fetchAllAssoc('form');

  foreach ($forms as $form) {
    $elements[$form->base_entity][$form->base_entity_bundle]['flexiform:' . $form->form] = array(
      'label' => $form->label,
      'class' => 'FlexiformElementFlexiform',
      'type' => 'form',
      'group' => 'Flexiform',
      'form' => $form->form,
    );
  }

  // Get all the field elements.
  $fields_info = field_info_instances();
  foreach ($fields_info as $entity_type => $entity_fields) {
    foreach ($entity_fields as $bundle => $bundle_fields) {
      foreach ($bundle_fields as $field_name => $instance) {
        $elements[$entity_type][$bundle]['field:' . $field_name] = array(
          'label' => $instance['label'],
          'class' => 'FlexiformElementField',
          'type' => 'field',
          'group' => 'Field',
          'field_name' => $field_name,
        );
      }
    }
  }

  return $elements;
}
