<?php
/**
 * @file
 * Module for the FlexiformSubmission Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

/**
 * Implements hook_menu()
 *
 * We want to add a manage form fields tab and a manage form entities tab
 * for each flexiform
 */
function flexiform_menu() {
  $items = array();
  $flexiform = entity_get_info('flexiform_submission');
  foreach($flexiform['bundles'] as $bundle_name => $bundle_info) {
    if (isset($bundle_info['admin'])) {
      // Get the admin path of the flexiform
      $path = $bundle_info['admin']['path'];
      // Different bundles can appear on the same path (e.g. %node_type and
      // %comment_node_type). To allow field_ui_menu_load() to extract the
      // actual bundle object from the translated menu router path
      // arguments, we need to identify the argument position of the bundle
      // name string ('bundle argument') and pass that position to the menu
      // loader. The position needs to be casted into a string; otherwise it
      // would be replaced with the bundle name string.
      if (isset($bundle_info['admin']['bundle argument'])) {
        $bundle_arg = $bundle_info['admin']['bundle argument'];
        $bundle_pos = (string) $bundle_arg;
      }
      else {
        $bundle_arg = $bundle_name;
        $bundle_pos = '0';
      }
            
      $items["$path/form-fields"] = array(
        'title' => 'Manage form fields',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_manage_form_fields_form', 4),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );
      
      $items["$path/form-fields/%flexiform_formfield"] = array(
        'title' => 'Edit Field',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_configure_form', 4, 7),
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );
      
      $items["$path/form-fields/%flexiform_formfield/edit"] = array(
        'title' => 'Configure',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_configure_form', 4, 7),
        'file' => 'flexiform.admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('administer flexiforms'),
      );
      
      $items["$path/form-fields/%flexiform_formfield/widget-type"] = array(
        'title' => 'Widget type',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_widget_type_form', 4, 7),
        'file' => 'flexiform.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer flexiforms'),
      );
      
      $items["$path/form-fields/%flexiform_formfield/remove"] = array(
        'title' => 'Remove',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_remove_form', 4, 7),
        'file' => 'flexiform.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer flexiforms'),
      );
      
      $items["$path/form-entities"] = array(
        'title' => 'Manage form entities',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_manage_form_entities_form', 4),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );
    }
  }
  return $items;
}

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function flexiform_entity_info() {
  $return['flexiform_submission'] = array(
    'label' => t('Flexiform Submission'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'FlexiformSubmission',
    'controller class' => 'FlexiformSubmissionController',
    'base table' => 'flexiform_submission',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'flexiform_submission_id',
        'bundle' => 'form',
    ),
    // Bundles are defined by the flexiforms below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'form',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'flexiform_submission_create',
    'access callback' => 'flexiform_submission_access',
    'module' => 'flexiform',
    // The information below is used by the FlexiformSubmissionUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/flexiform_submissions',
      'file' => 'flexiform_submission.admin.inc',
      'controller class' => 'FlexiformSubmissionUIController',
      'menu wildcard' => '%flexiform_submission',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['flexiform'] = array(
    'label' => t('Flexible Form'),
    'entity class' => 'Flexiform',
    'controller class' => 'FlexiformController',
    'base table' => 'flexiform',
    'fieldable' => FALSE,
    'bundle of' => 'flexiform_submission',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'form',
      'label' => 'label',
    ),
    'access callback' => 'flexiform_access',
    'module' => 'flexiform',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/flexiforms',
      'file' => 'flexiform.admin.inc',
      'controller class' => 'FlexiformUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the flexiforms via a hook to avoid a recursion
 * issue as loading the flexiforms requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function flexiform_entity_info_alter(&$entity_info) {
  foreach (flexiform_get_flexiforms() as $type => $info) {
    $entity_info['flexiform_submission']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/flexiforms/manage/%flexiform',
        'real path' => 'admin/structure/flexiforms/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer flexiforms'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function flexiform_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer flexiforms' => array(
      'title' => t('Administer flexiforms'),
      'description' => t('Create and delete fields for flexiforms, and set their permissions.'),
    ),
    'administer flexiform_submissions' => array(
      'title' => t('Administer flexiform_submissions'),
      'description' => t('Edit and delete all flexiform_submissions'),
    ),  
  );
  
  //Generate permissions per flexiform_submission 
  foreach (flexiform_get_flexiforms() as $form) {
    $form_name = check_plain($form->form);
    $permissions += array(
      "submit a $form_name flexiform" => array(
        'title' => t('Submit a %form_name Flexiform (create a new submission)', array('%form_name' => $form->label)),
      ),
      "edit own $form_name flexiform submissions" => array(
        'title' => t('Edit own %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "edit any $form_name flexiform submission" => array(
        'title' => t('Edit any %form_name Flexiform Submission', array('%form_name' => $form->label)),
      ),
      "view own $form_name flexiform submissions" => array(
        'title' => t('View own %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "view any $form_name flexiform submission" => array(
        'title' => t('View any %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "delete own $form_name flexiform submissions" => array(
        'title' => t('View own %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "delete any $form_name flexiform submission" => array(
        'title' => t('View any %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
    );
  }
  return $permissions;  
}

/**
 * Determines whether the given user has access to a flexiform_submission.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $flexiform_submission
 *   Optionally a flexiform_submission or a flexiform to check access for. If nothing is
 *   given, access for all flexiform_submissions is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function flexiform_submission_access($op, $flexiform_submission = NULL, $account = NULL) {
  global $user;
  
  // If the account is NULL use the user
  if ($account === NULL) {
    $account = $user;
  }
  
  // Check if the user can just administer anything
  if (user_access('administer flexiform_submissions', $account)) {
    return TRUE;
  }
  
  // Special case for when adding new submissions
  if ($op == 'submit') {
    $form_name = $flexiform_submission;
    return user_access("submit a $form_name flexiform", $account); 
  }
  if (isset($flexiform_submission) && $form_name = $flexiform_submission->form) {
    // If we don't recognise the op, return false
    if (!in_array($op, array('view','edit','delete'))) {
      return FALSE;
    }
    
    if (user_access("$op any $form_name flexiform submission", $account)) {
      return TRUE;
    }
    
    if ($flexiform_submission->user == $account->uid && user_access("$op own $form_name flexiform submissions", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function flexiform_access($op, $type = NULL, $account = NULL) {
  return user_access('administer flexiforms', $account);
}

/**
 * Gets an array of all flexiforms, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return Flexiform[]
 *   Depending whether $type isset, an array of flexiforms or a single one.
 */
function flexiform_get_flexiforms($flexiform_name = NULL) {
  // entity_load will get the Entity controller for our flexiform_submission entity and call the load
  // function of that object - we are loading entities by name here.
  $flexiforms = entity_load_multiple_by_name('flexiform', isset($flexiform_name) ? array($flexiform_name) : FALSE);
  return isset($flexiform_name) ? reset($flexiforms) : $flexiforms;
}

/**
 * Menu argument loader; Load a flexiform by string.
 *
 * @param $form
 *   The machine-readable name of a flexiform to load.
 * @return
 *   A flexiform array or FALSE if $type does not exist.
 */
function flexiform_load($form) {
  return flexiform_get_flexiforms($form);
}

/**
 * Fetch a flexiform_submission object. Make sure that the wildcard you choose 
 * in the flexiform_submission entity definition fits the function name here.
 *
 * @param $flexiform_submission_id
 *   Integer specifying the flexiform_submission id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $flexiform_submission object or FALSE if it cannot be loaded.
 *
 * @see flexiform_submission_load_multiple()
 */
function flexiform_submission_load($flexiform_submission_id, $reset = FALSE) {
  $flexiform_submissions = flexiform_submission_load_multiple(array($flexiform_submission_id), array(), $reset);
  return reset($flexiform_submissions);
}

/**
 * Load multiple flexiform_submissions based on certain conditions.
 *
 * @param $flexiform_submission_ids
 *   An array of flexiform_submission IDs.
 * @param $conditions
 *   An array of conditions to match against the {flexiform_submission} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of flexiform_submission objects, indexed by flexiform_submission_id.
 *
 * @see entity_load()
 * @see flexiform_submission_load()
 */
function flexiform_submission_load_multiple($flexiform_submission_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('flexiform_submission', $flexiform_submission_ids, $conditions, $reset);
}

/**
 * Deletes a flexiform_submission.
 */
function flexiform_submission_delete(FlexiformSubmission $flexiform_submission) {
  $flexiform_submission->delete();
}

/**
 * Delete multiple flexiform_submissions.
 *
 * @param $flexiform_submission_ids
 *   An array of flexiform_submission IDs.
 */
function flexiform_submission_delete_multiple(array $flexiform_submission_ids) {
  entity_get_controller('flexiform_submission')->delete($flexiform_submission_ids);
}

/**
 * Create a flexiform_submission object.
 */
function flexiform_submission_create($values = array()) {
  return entity_get_controller('flexiform_submission')->create($values);
}

/**
 * Saves a flexiform_submission to the database.
 *
 * @param $flexiform_submission
 *   The flexiform_submission object.
 */
function flexiform_submission_save(FlexiformSubmission $flexiform_submission) {
  return $flexiform_submission->save();
}

/**
 * Saves a flexiform to the db.
 */
function flexiform_save(Flexiform $form) {
  $form->save();
}

/**
 * Deletes a flexiform from the db.
 */
function flexiform_delete(Flexiform $form) {
  $form->delete();
}

/**
 * URI callback for flexiform_submissions
 */
function flexiform_submission_uri(FlexiformSubmission $flexiform_submission){
  return array(
    'path' => 'flexiform_submission/' . $flexiform_submission->flexiform_submission_id,
  );
}

/**
 * Menu title callback for showing individual entities
 */
function flexiform_submission_page_title(FlexiformSubmission $flexiform_submission){
  return entity_label('flexiform_submission', $flexiform_submission);
}

/**
 * Sets up content to show an individual flexiform_submission
 * @todo - get rid of drupal_set_title();
 */
function flexiform_submission_page_view($flexiform_submission, $view_mode = 'full') {    
  $controller = entity_get_controller('flexiform_submission');  
  $content = $controller->view(array($flexiform_submission->flexiform_submission_id => $flexiform_submission));
  //drupal_set_title($flexiform_submission->name);
  return $content;
}

/**
 * Split a namespace into entity and field name
 */
function flexiform_formfield_load($string) {
  $bits = explode('__', $string);
  if (count($bits) != 2) {
    drupal_set_message('Invalid Namspace Provided: ' . $string, 'Error');
    return FALSE;
  }
  
  $formfield['entity_namespace'] = $bits[0];
  $formfield['field_name'] = $bits[1];
  
  return $formfield;
}
/**
 * Implements hook_views_api().
 */
function flexiform_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'flexiform') . '/views',
  );
}

/**
 * Implement hook_theme().
 */
function flexiform_theme() {
  return array(
    'flexiform_submission_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'flexiform_submission.admin.inc',
    ),
    'flexiform_submission' => array(
      'render element' => 'elements',
      'template' => 'flexiform_submission',
    ),
    'flexiform_field_table' => array(
      'render element' => 'elements',
    ),
  );
}  

/**
 * Implements hook_menu_local_tasks_alter().
 */
function flexiform_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/flexiform_submissions/add' on 'admin/structure/flexiform_submissions'.
  if ($root_path == 'admin/content/flexiform_submissions') {
    $item = menu_get_item('flexiform');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implement hook_element_info().
 */
function flexiform_element_info() {
  return array(
    'flexiform_field_table' => array(
      '#theme' => 'flexiform_field_table',
      '#pre_render' => array('flexiform_field_table_pre_render'),
      '#regions' => array('' => array()),
    ),
  );
}
