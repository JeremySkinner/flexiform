diff --git a/flexiform.flexiform.inc b/flexiform.flexiform.inc
index 64ced92..9ffa8bc 100644
--- a/flexiform.flexiform.inc
+++ b/flexiform.flexiform.inc
@@ -308,8 +308,68 @@ function flexiform_flexiform_element_info() {
     );
   }
 
+  // Get all entity properties
+  foreach (entity_get_property_info() as $entity_type => $info) {
+    $entity_properties = $info['properties'];
+    if (isset($info['bundles'])) {
+      foreach ($info['bundles'] as $bundle => $binfo) {
+        $properties = $binfo['properties'] + $entity_properties;
+        foreach ($properties as $name => $property) {
+          // If it is a field api field. Use the field api logic.
+          if (!empty($property['field'])) {
+            $field = field_info_field($name);
+            $field_class = 'FlexiformElementField_' . $field['type'];
+            $elements[$entity_type][$bundle]['field:' . $name] = array(
+              'label' => $property['label'],
+              'class' => class_exists($field_class) ? $field_class : 'FlexiformElementField',
+              'type' => 'field',
+              'group' => 'Field',
+              'field_name' => $name,
+            );
+          }
+          else if (!empty($property['setter callback'])) {
+            $class = 'FlexiformElementEntityProperty';
+            if (!empty($property['type'])) {
+              $type = $property['type'];
+              if ($list = entity_property_list_extract_type($type)) {
+                $type = $list;
+              }
+              $class = 'FlexiformElementEntityProperty__' . $type;
+            }
+
+            $elements[$entity_type][$bundle]['property:' . $name] = array(
+              'label' => $property['label'],
+              'class' => class_exists($class) ? $class : 'FlexiformElementEntityProperty',
+              'type' => 'property',
+              'group' => 'Property',
+              'property' => $name,
+            );
+          }
+        }
+      }
+    }
+    else {
+      foreach ($entity_properties as $name => $property) {
+        if (!empty($property['setter callback'])) {
+          $class = 'FlexiformElementProperty';
+          if (!empty($property['type'])) {
+            $class = 'FlexiformElementProperty__' . $property['type'];
+          }
+
+          $elements[$entity_type][$entity_type]['property:' . $name] = array(
+            'label' => $property['label'],
+            'class' => class_exists($class) ? $class : 'FlexiformElementProperty',
+            'type' => 'property',
+            'group' => 'Property',
+            'property' => $name,
+          );
+        }
+      }
+    }
+  }
+
   // Get all the field elements.
-  $fields_info = field_info_instances();
+  /*$fields_info = field_info_instances();
   foreach ($fields_info as $entity_type => $entity_fields) {
     foreach ($entity_fields as $bundle => $bundle_fields) {
       foreach ($bundle_fields as $field_name => $instance) {
@@ -324,7 +384,7 @@ function flexiform_flexiform_element_info() {
         );
       }
     }
-  }
+  }*/
 
   // Get node elements
   foreach (node_type_get_types() as $bundle => $info) {
diff --git a/flexiform.info b/flexiform.info
index 7bdd998..2a12545 100644
--- a/flexiform.info
+++ b/flexiform.info
@@ -40,6 +40,7 @@ files[] = includes/element/node_sticky.element.inc
 files[] = includes/element/custom_html.element.inc
 files[] = includes/element/ctools_content.element.inc
 files[] = includes/element/node_author.element.inc
+files[] = includes/element/property.element.inc
 files[] = includes/element/user_mail.element.inc
 files[] = includes/element/user_name.element.inc
 files[] = includes/element/user_pass.element.inc
diff --git a/includes/element/property.element.inc b/includes/element/property.element.inc
new file mode 100644
index 0000000..8cfb2a1
--- /dev/null
+++ b/includes/element/property.element.inc
@@ -0,0 +1,216 @@
+<?php
+/**
+ * @file
+ * Contains class for the entity property elements.
+ */
+
+/**
+ * Class to add an element for entity properties.
+ */
+class FlexiformElementEntityProperty extends FlexiformElement {
+
+  /**
+   * @var string
+   * Property Name.
+   */
+  protected $property;
+
+  /**
+   * @var array $propertyInfo
+   * The property info.
+   */
+  protected $propertyInfo;
+
+  /**
+   * @var string $dataType
+   * The data type of the info.
+   */
+  protected $dataType;
+
+  /**
+   * @var bool $isList
+   * Is this property a list.
+   */
+  protected $isList = FALSE;
+
+  /**
+   * Overrides FlexiformElement::__construct().
+   */
+  public function __construct($flexiform, $settings, $element_namespace = '') {
+    parent::__construct($flexiform, $settings, $element_namespace);
+    $this->property = $this->element_info['property'];
+    $this->propertyInfo = $this->wrapper()->getPropertyInfo($this->property);
+    $this->dataType = $this->propertyInfo['type'];
+
+    if ($list_type = entity_property_list_extract_type($this->dataType)) {
+      $this->dataType = $list_type;
+      $this->isList = TRUE;
+    }
+  }
+
+  /**
+   * Return the wrapper for the entity.
+   */
+  public function wrapper($entity = NULL) {
+    return entity_metadata_wrapper($this->entity_type, $entity, array('bundle' => $this->bundle));
+  }
+
+  /**
+   * Return the property wrapper.
+   */
+  public function property($entity) {
+    return entity_metadata_wrapper($this->entity_type, $entity)->get($this->property);
+  }
+
+  /**
+   * Return the form element for this FlexiformElement.
+   */
+  public function form($form, &$form_state, $entity, $language = LANGUAGE_NONE) {
+    $parents = $form['#parents'];
+    $parents[] = $this->property;
+
+    // Get the value.
+    $value = $this->wrapper($entity)->get($this->property)->value();
+
+    // If there is no value work out the default.
+    if (empty($value)) {
+      $value = '';
+      if (!empty($this->settings['default_value']['default_value'])) {
+        $value = $this->settings['default_value']['default_value'];
+      }
+      if (!empty($this->settings['default_value']['use_tokens'])) {
+        $value = $this->replaceCtoolsSubstitutions($value, $form['#flexiform_entities']);
+      }
+    }
+
+    $form[$this->element_namespace] = array(
+      '#type' => 'textfield',
+      '#parents' => $parents,
+      '#title' => $this->label(),
+      '#required' => TRUE,
+      '#default_value' => $value,
+      '#maxlength' => 255,
+    );
+
+    // If the property specifies an options list then use it.
+    if ($options = $this->property($entity)->optionsList()) {
+      // Pick the list widget.
+      $widget = 'select';
+      if (!empty($this->settings['options']['widget'])) {
+        $widget = $this->settings['options']['widget'];
+      }
+
+      $form[$this->element_namespace]['#type'] = $widget;
+      $form[$this->element_namespace]['#options'] = $options;
+      unset($form[$this->element_namespace]['#maxlength']);
+
+      if ($this->isList) {
+        $form[$this->element_namespace]['#multiple'] = TRUE;
+        if ($widget == 'radios') {
+          $form[$this->element_namespace]['#type'] = 'checkboxes';
+        }
+      }
+    }
+
+    $form = parent::form($form, $form_state, $entity);
+
+    return $form;
+  }
+
+  /**
+   * Validate the form element.
+   */
+  public function formValidate($form, &$form_state, $entity, $language = LANGUAGE_NONE) {
+    $value = $this->formExtractValues($form, $form_state, $entity);
+    $this->wrapper($entity)->get($this->property)->validate($value);
+  }
+
+  /**
+   * Submit the form element.
+   */
+  public function formSubmit($form, &$form_state, $entity, $language = LANGUAGE_NONE) {
+    $value = $this->formExtractValues($form, $form_state, $entity);
+    $this->wrapper($entity)->get($this->property)->set($value);
+  }
+
+  /**
+   * Extract the submitted values for this form element.
+   */
+  public function formExtractValues($form, &$form_state, $entity) {
+    $parents = $form['#parents'];
+    $parents[] = $this->getEntityNamespace();
+    $parents[] = $this->property;
+
+    $value = drupal_array_get_nested_value($form_state['values'], $parents);
+    return $value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function configureForm($form, &$form_state, $flexiform) {
+    $form = parent::configureForm($form, $form_state, $flexiform);
+
+    $form['default_value'] = array(
+      '#tree' => TRUE,
+      '#type' => 'fieldset',
+      '#title' => t('Default Value'),
+      '#weight' => -5,
+    );
+
+    $form['default_value']['default_value'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->label() ? $this->label() : t('Default'),
+      '#default_value' => !empty($this->settings['default_value']['default_value']) ? $this->settings['default_value']['default_value'] : '',
+      '#maxlength' => 255,
+    );
+
+    $form['default_value']['use_tokens'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Use Tokens in Default Value'),
+      '#default_value' => !empty($this->settings['default_value']['use_tokens']),
+    );
+
+    $form['default_value']['contexts'] = array(
+      '#title' => t('Substitutions'),
+      '#type' => 'fieldset',
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+    );
+
+    $form['default_value']['contexts']['contexts'] = $this->getCtoolsSubstitutionsList();
+
+    // Options for handling options.
+    if (!empty($this->propertyInfo['options list'])) {
+      $form['options'] = array(
+        '#tree' => TRUE,
+        '#type' => 'fieldset',
+        '#title' => t('Value Selection'),
+      );
+
+      $form['options']['widget'] = array(
+        '#type' => 'select',
+        '#title' => t('Widget'),
+        '#description' => t('What sort of widget to you want to use?'),
+        '#options' => array(
+          'select' => t('Select'),
+          'radios' => t('Radios/Checkboxes'),
+        ),
+        '#default_value' => !empty($this->settings['options']['widget']) ? $this->settings['options']['widget'] : 'select',
+      );
+    }
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function configureFormSubmit($form, &$form_state, $flexiform) {
+    $this->settings['default_value']['default_value'] = $form_state['values']['default_value']['default_value'];
+    $this->settings['default_value']['use_tokens'] = $form_state['values']['default_value']['use_tokens'];
+    $this->settings['options']['widget'] = $form_state['values']['options']['widget'];
+
+    parent::configureFormSubmit($form, $form_state, $flexiform);
+  }
+}
